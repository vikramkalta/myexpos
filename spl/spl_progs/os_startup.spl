loadi(63,13);
loadi(64,14);

loadi(65,7);
loadi(66,8);

loadi(69,11);
loadi(70,12);

loadi(22,35);
loadi(23,36);

loadi(2,15);
loadi(3,16);

loadi(4,17);
loadi(5,18);

loadi(16,29);
loadi(17,30);

PTBR = PAGE_TABLE_BASE; // as PID of idle process is 0
PTLR = 10;

//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

SP = 8*512;

[81 * 512] = [69*512 + 1];

[76 * 512] = [65 * 512 + 1];


[PROCESS_TABLE + 11] = 82;
[PROCESS_TABLE + 1] = 0;

PROCESS_TABLE = PROCESS_TABLE + 16;
[PROCESS_TABLE + 11] = 80;
[PROCESS_TABLE + 1] = 1;

[SYSTEM_STATUS_TABLE + 1] = 1;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

//backup;

//print "TIMER";

//restore;
//SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

//ireturn;

